console.log('üõ°Ô∏è –¢–µ—Å—Ç –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É D1 –±–∞–∑–∏...\n');

import { execSync } from "node:child_process";
import fs from "node:fs/promises";

// –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç
try {
  console.log('üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—è—Ö:');
  
  const tables = ['sales', 'inventory_levels', 'product_variants'];
  const results = [];
  
  for (const table of tables) {
    try {
      const sql = `SELECT COUNT(*) as count FROM ${table}`;
      const output = execSync(`wrangler d1 execute hoodie-sales --remote --command "${sql}" --json`, { encoding: 'utf8' });
      const json = JSON.parse(output);
      const count = json[0]?.results?.[0]?.count || 0;
      
      results.push({ table, count });
      console.log(`  ‚úÖ ${table}: ${count.toLocaleString()} –∑–∞–ø–∏—Å—ñ–≤`);
      
    } catch (error) {
      console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è ${table}: ${error.message}`);
    }
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ª–æ–≥
  const logEntry = {
    timestamp: new Date().toISOString(),
    event_type: 'QUICK_CHECK',
    details: { tables: results }
  };
  
  await fs.mkdir('logs', { recursive: true });
  const date = new Date().toISOString().split('T')[0];
  const logFile = `logs/database-events-${date}.json`;
  
  let logs = [];
  try {
    const existing = await fs.readFile(logFile, 'utf8');
    logs = JSON.parse(existing);
  } catch {
    // –ù–æ–≤–∏–π —Ñ–∞–π–ª
  }
  
  logs.push(logEntry);
  await fs.writeFile(logFile, JSON.stringify(logs, null, 2), 'utf8');
  
  console.log(`\n‚úÖ –õ–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${logFile}`);
  
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
}