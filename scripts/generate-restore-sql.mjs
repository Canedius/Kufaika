import { readFileSync, writeFileSync } from 'fs';

console.log('üîÑ –°—Ç–≤–æ—Ä—é—î–º–æ SQL —Ñ–∞–π–ª –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π');

function csvToSQL(csvFile, tableName) {
  console.log(`üìñ –û–±—Ä–æ–±–ª—è—é ${csvFile}...`);
  const csvContent = readFileSync(`../../backups/${csvFile}`, 'utf8');
  const lines = csvContent.trim().split('\n');
  const headers = lines[0].replace(/"/g, '').split(',');
  
  let sql = `-- –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ ${tableName}\n-- DELETE FROM ${tableName}; -- ‚ö†Ô∏è –ó–ê–ö–û–ú–ï–ù–¢–û–í–ê–ù–û –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò\n\n`;
  
  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].replace(/"/g, '').split(',');
    if (values.length === headers.length && values.every(v => v.trim())) {
      const insertValues = values.map(v => isNaN(v) ? `'${v}'` : v).join(', ');
      sql += `INSERT INTO ${tableName} (${headers.join(', ')}) VALUES (${insertValues});\n`;
    }
  }
  
  return sql;
}

try {
  // –ì–µ–Ω–µ—Ä—É—î–º–æ SQL –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
  let fullSQL = '-- –ü–û–í–ù–ï –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ë–ê–ó–ò –ó –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô 4 –ñ–û–í–¢–ù–Ø 2025\n';
  fullSQL += '-- –°—Ç–∞–Ω–æ–º –Ω–∞ 13:26 (–¥–æ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö)\n\n';
  
  fullSQL += csvToSQL('sales-2025-10-04_13-26-50.csv', 'sales');
  fullSQL += '\n';
  fullSQL += csvToSQL('inventory_levels-2025-10-04_13-26-50.csv', 'inventory_levels');
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ SQL —Ñ–∞–π–ª
  writeFileSync('./restore-backup.sql', fullSQL, 'utf8');
  
  console.log('‚úÖ SQL —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: restore-backup.sql');
  console.log('üöÄ –¢–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ wrangler...');
  
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
}