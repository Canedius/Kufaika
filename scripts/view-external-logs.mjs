import fs from "node:fs/promises";
import path from "node:path";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –ª–æ–≥—ñ–≤
async function viewExternalLogs(days = 7) {
  console.log(`üìã –ü–µ—Ä–µ–≥–ª—è–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –ª–æ–≥—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ ${days} –¥–Ω—ñ–≤:\n`);
  
  try {
    await fs.mkdir('logs', { recursive: true });
    
    const now = new Date();
    const events = [];
    
    // –ó–±–∏—Ä–∞—î–º–æ –ª–æ–≥–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
    for (let i = 0; i < days; i++) {
      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);
      const dateStr = date.toISOString().split('T')[0];
      const logFile = `logs/database-events-${dateStr}.json`;
      
      try {
        const content = await fs.readFile(logFile, 'utf8');
        const dailyEvents = JSON.parse(content);
        events.push(...dailyEvents);
      } catch {
        // –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è
      }
    }
    
    if (events.length === 0) {
      console.log('üì≠ –ó–æ–≤–Ω—ñ—à–Ω—ñ—Ö –ª–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –ø–æ —á–∞—Å—É
    events.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${events.length} –ø–æ–¥—ñ–π:\n`);
    
    // –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞–º
    const byType = {};
    events.forEach(event => {
      if (!byType[event.event_type]) {
        byType[event.event_type] = [];
      }
      byType[event.event_type].push(event);
    });
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞—Ö
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –ø–æ–¥—ñ–π:');
    Object.entries(byType).forEach(([type, events]) => {
      console.log(`  ${getEventIcon(type)} ${type}: ${events.length} —Ä–∞–∑—ñ–≤`);
    });
    
    console.log('\nüìã –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó:');
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –ø–æ–¥—ñ–π
    events.slice(0, 20).forEach(event => {
      const date = new Date(event.timestamp).toLocaleString('uk-UA');
      const icon = getEventIcon(event.event_type);
      
      console.log(`\n${icon} ${event.event_type}`);
      console.log(`   ‚è∞ ${date}`);
      
      if (event.details && Object.keys(event.details).length > 0) {
        console.log(`   üìù –î–µ—Ç–∞–ª—ñ:`, JSON.stringify(event.details, null, 6));
      }
    });
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–≤:', error.message);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø—É –ø–æ–¥—ñ—ó
function getEventIcon(eventType) {
  const icons = {
    'DATABASE_SNAPSHOT': 'üì∏',
    'INTEGRITY_CHECK': 'üîç',
    'INTEGRITY_CHECK_ERROR': '‚ö†Ô∏è',
    'MONITORING_ALERT': 'üö®',
    'MONITORING_ERROR': '‚ùå',
    'BULK_UPDATE': 'üì¶',
    'SYNC_OPERATION': 'üîÑ',
    'BACKUP_CREATED': 'üíæ'
  };
  
  return icons[eventType] || 'üìù';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤
async function cleanOldLogs(keepDays = 30) {
  console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ —Å—Ç–∞—Ä—ñ—à–∏—Ö –∑–∞ ${keepDays} –¥–Ω—ñ–≤...`);
  
  try {
    const logsDir = 'logs';
    const files = await fs.readdir(logsDir);
    
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - keepDays);
    
    let deletedCount = 0;
    
    for (const file of files) {
      if (!file.startsWith('database-events-')) continue;
      
      // –í–∏—Ç—è–≥—É—î–º–æ –¥–∞—Ç—É –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
      const match = file.match(/database-events-(\d{4}-\d{2}-\d{2})\.json/);
      if (!match) continue;
      
      const fileDate = new Date(match[1]);
      
      if (fileDate < cutoffDate) {
        await fs.unlink(path.join(logsDir, file));
        deletedCount++;
        console.log(`  üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ: ${file}`);
      }
    }
    
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤`);
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤:', error.message);
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
export { viewExternalLogs, cleanOldLogs };

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å
if (import.meta.url === `file://${process.argv[1].replace(/\\/g, '/')}`) {
  const days = process.argv[2] ? parseInt(process.argv[2]) : 7;
  viewExternalLogs(days);
}