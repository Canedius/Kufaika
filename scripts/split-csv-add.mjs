import { readFileSync, writeFileSync } from 'fs';

console.log('üì¶ –†–æ–∑–¥—ñ–ª—è—î–º–æ add-csv-data.sql –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏');

try {
  const sqlContent = readFileSync('./add-csv-data.sql', 'utf8');
  const lines = sqlContent.split('\n');
  const insertLines = lines.filter(line => line.trim().startsWith('INSERT OR IGNORE'));
  
  console.log(`üìä –í—Å—å–æ–≥–æ INSERT OR IGNORE –∫–æ–º–∞–Ω–¥: ${insertLines.length}`);
  
  const BATCH_SIZE = 300; // –ú–µ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
  let fileIndex = 1;
  
  for (let i = 0; i < insertLines.length; i += BATCH_SIZE) {
    const batch = insertLines.slice(i, i + BATCH_SIZE);
    const fileName = `add-csv-part-${String(fileIndex).padStart(2, '0')}.sql`;
    
    let content = `-- –î–û–î–ê–í–ê–ù–ù–Ø CSV —á–∞—Å—Ç–∏–Ω–∞ ${fileIndex}\n`;
    content += `-- –ö–æ–º–∞–Ω–¥–∏ ${i + 1} - ${i + batch.length} –∑ ${insertLines.length}\n\n`;
    content += batch.join('\n');
    
    writeFileSync(fileName, content, 'utf8');
    console.log(`‚úÖ ${fileName} (${batch.length} –∫–æ–º–∞–Ω–¥)`);
    
    fileIndex++;
  }
  
  console.log(`üéØ –°—Ç–≤–æ—Ä–µ–Ω–æ ${fileIndex - 1} —á–∞—Å—Ç–∏–Ω –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è CSV`);
  
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
}