import { readFileSync, writeFileSync } from 'fs';

console.log('üì¶ –†–æ–∑–¥—ñ–ª—è—î–º–æ –≤–µ–ª–∏–∫–∏–π SQL —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏');

try {
  const sqlContent = readFileSync('./restore-backup.sql', 'utf8');
  const lines = sqlContent.split('\n');
  
  const BATCH_SIZE = 500; // –ü–æ 500 —Ä—è–¥–∫—ñ–≤ –≤ –∫–æ–∂–Ω–æ–º—É —Ñ–∞–π–ª—ñ
  let fileIndex = 1;
  let currentBatch = [];
  let sqlLines = [];
  
  console.log(`üìä –í—Å—å–æ–≥–æ —Ä—è–¥–∫—ñ–≤: ${lines.length}`);
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ INSERT —Ä—è–¥–∫–∏
  for (const line of lines) {
    if (line.trim().startsWith('INSERT INTO')) {
      sqlLines.push(line);
    }
  }
  
  console.log(`üìã –í—Å—å–æ–≥–æ INSERT –∫–æ–º–∞–Ω–¥: ${sqlLines.length}`);
  
  // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –±–∞—Ç—á—ñ
  for (let i = 0; i < sqlLines.length; i += BATCH_SIZE) {
    const batch = sqlLines.slice(i, i + BATCH_SIZE);
    const fileName = `restore-part-${String(fileIndex).padStart(2, '0')}.sql`;
    
    let content = `-- –ß–∞—Å—Ç–∏–Ω–∞ ${fileIndex} –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏\n`;
    content += `-- –†—è–¥–∫–∏ ${i + 1} - ${i + batch.length} –∑ ${sqlLines.length}\n\n`;
    content += batch.join('\n');
    
    writeFileSync(fileName, content, 'utf8');
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${fileName} (${batch.length} –∫–æ–º–∞–Ω–¥)`);
    
    fileIndex++;
  }
  
  console.log(`üéâ –°—Ç–≤–æ—Ä–µ–Ω–æ ${fileIndex - 1} —á–∞—Å—Ç–∏–Ω. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –ø–æ —á–µ—Ä–∑—ñ!`);
  
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
}