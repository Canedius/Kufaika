import { execSync } from 'node:child_process';
import { readFileSync } from 'fs';

console.log('üîÑ –ü–û–í–ù–ï –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ë–ê–ó–ò –ó –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô 4 –ñ–û–í–¢–ù–Ø 2025');
console.log('üìÖ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞–Ω–æ–º –Ω–∞ 13:26 4 –∂–æ–≤—Ç–Ω—è (–¥–æ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö)');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∫–æ–º–∞–Ω–¥ –≤ D1
function executeD1Command(sql) {
  try {
    const command = `wrangler d1 execute hoodie-sales --remote --command "${sql}"`;
    console.log(`–í–∏–∫–æ–Ω—É—é: ${sql.substring(0, 50)}...`);
    const result = execSync(command, { encoding: 'utf8' });
    return result;
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL: ${error.message}`);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è CSV —ñ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ SQL INSERT
function csvToInserts(csvFile, tableName) {
  console.log(`üìñ –ß–∏—Ç–∞—é ${csvFile}...`);
  const csvContent = readFileSync(`../backups/${csvFile}`, 'utf8');
  const lines = csvContent.trim().split('\n');
  const headers = lines[0].replace(/"/g, '').split(',');
  
  const inserts = [];
  
  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].replace(/"/g, '').split(',');
    if (values.length === headers.length && values.every(v => v.trim())) {
      const insertValues = values.map(v => isNaN(v) ? `'${v}'` : v).join(', ');
      inserts.push(`INSERT OR REPLACE INTO ${tableName} (${headers.join(', ')}) VALUES (${insertValues});`);
    }
  }
  
  console.log(`‚úÖ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${inserts.length} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ ${tableName}`);
  return inserts;
}

try {
  console.log('\nüö® –£–í–ê–ì–ê: –ó–∞—Ä–∞–∑ –±—É–¥–µ –ø–æ–≤–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!');
  console.log('–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω...\n');

  // –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ (—Ç—ñ–ª—å–∫–∏ sales —Ç–∞ inventory)
  console.log('üóëÔ∏è –û—á–∏—â—É—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –¥–∞–Ω—ñ...');
  // ‚ö†Ô∏è –ù–ï–ë–ï–ó–ü–ï–ß–ù–Ü DELETE –ö–û–ú–ê–ù–î–ò –ó–ê–ö–û–ú–ï–ù–¢–û–í–ê–ù–Ü
  // executeD1Command('DELETE FROM sales;');
  // executeD1Command('DELETE FROM inventory_levels;');
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ sales –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
  console.log('\nüìä –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–¥–∞–∂—ñ –∑ sales-2025-10-04_13-26-50.csv...');
  const salesInserts = csvToInserts('sales-2025-10-04_13-26-50.csv', 'sales');
  
  // –í–∏–∫–æ–Ω—É—î–º–æ INSERT –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø–∏—Ç—É (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥–æ–≤–≥–∏—Ö –∫–æ–º–∞–Ω–¥)
  console.log('   üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤...');
  for (let i = 0; i < salesInserts.length; i++) {
    try {
      executeD1Command(salesInserts[i]);
      if ((i + 1) % 100 === 0) {
        console.log(`   ‚è≥ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ${i + 1} –∑ ${salesInserts.length} –ø—Ä–æ–¥–∞–∂—ñ–≤...`);
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å—É ${i + 1}: ${error.message.substring(0, 50)}...`);
    }
  }
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ inventory
  console.log('\nüì¶ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∑ inventory_levels-2025-10-04_13-26-50.csv...');
  const inventoryInserts = csvToInserts('inventory_levels-2025-10-04_13-26-50.csv', 'inventory_levels');
  
  for (let i = 0; i < inventoryInserts.length; i++) {
    try {
      executeD1Command(inventoryInserts[i]);
      if ((i + 1) % 50 === 0) {
        console.log(`   ‚è≥ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ${i + 1} –∑ ${inventoryInserts.length} –ø–æ–∑–∏—Ü—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é...`);
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é ${i + 1}: ${error.message.substring(0, 50)}...`);
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
  console.log('\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...');
  
  const salesCheck = execSync('wrangler d1 execute hoodie-sales --remote --command "SELECT COUNT(*) as total FROM sales" --json', { encoding: 'utf8' });
  const salesCount = JSON.parse(salesCheck)[0]?.results[0]?.total || 0;
  
  const inventoryCheck = execSync('wrangler d1 execute hoodie-sales --remote --command "SELECT COUNT(*) as total FROM inventory_levels" --json', { encoding: 'utf8' });
  const inventoryCount = JSON.parse(inventoryCheck)[0]?.results[0]?.total || 0;

  console.log(`‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–∂—ñ–≤: ${salesCount}`);
  console.log(`‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é: ${inventoryCount}`);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ KUF007 –∑–∞ –∂–æ–≤—Ç–µ–Ω—å 2025
  console.log('\nüéØ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ KUF007 –∑–∞ –∂–æ–≤—Ç–µ–Ω—å 2025...');
  const kuf007Check = execSync('wrangler d1 execute hoodie-sales --remote --command "SELECT COUNT(*) as count FROM sales s JOIN products p ON s.product_id = p.id JOIN periods per ON s.period_id = per.id WHERE p.name LIKE \'%OVERSIZE%\' AND per.label = \'–ñ–æ–≤—Ç–µ–Ω—å\' AND per.year = 2025" --json', { encoding: 'utf8' });
  const kuf007Count = JSON.parse(kuf007Check)[0]?.results[0]?.count || 0;
  
  console.log(`‚úÖ KUF007 –∂–æ–≤—Ç–µ–Ω—å 2025: ${kuf007Count} –∑–∞–ø–∏—Å—ñ–≤`);
  
  console.log('\nüéâ –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!');
  console.log('üìã –í—Å—ñ –¥–∞–Ω—ñ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π —Å—Ç–∞–Ω–æ–º –Ω–∞ 13:26 4 –∂–æ–≤—Ç–Ω—è 2025');

} catch (error) {
  console.error('\n‚ùå –ü–û–ú–ò–õ–ö–ê –ü–†–ò –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ü:', error.message);
  console.log('üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç —â–µ —Ä–∞–∑ –∞–±–æ –≤—ñ–¥–Ω–æ–≤—ñ—Ç—å –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É');
  process.exit(1);
}