import fs from "node:fs/promises";
import { execSync } from "node:child_process";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –±–µ–∫–∞–ø—É —Å—Ç–∞–Ω—É –±–∞–∑–∏
export async function createDatabaseSnapshot(description = 'Manual snapshot') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `db-snapshot-${timestamp}.json`;
  
  console.log(`üì∏ –°—Ç–≤–æ—Ä—é—î–º–æ –∑–Ω—ñ–º–æ–∫ –±–∞–∑–∏: ${filename}`);
  
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–ª—é—á–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
    const tables = ['sales', 'inventory_levels', 'product_variants', 'products', 'colors', 'sizes', 'periods'];
    const snapshot = {
      timestamp: new Date().toISOString(),
      description,
      tables: {}
    };
    
    for (const table of tables) {
      console.log(`  üìã –ï–∫—Å–ø–æ—Ä—Ç ${table}...`);
      
      const sql = `SELECT * FROM ${table}`;
      const result = execSync(`wrangler d1 execute hoodie-sales --remote --command "${sql}" --json`, { encoding: 'utf8' });
      const json = JSON.parse(result);
      
      snapshot.tables[table] = {
        count: json[0]?.results?.length || 0,
        data: json[0]?.results || []
      };
      
      console.log(`    ‚úÖ ${snapshot.tables[table].count} –∑–∞–ø–∏—Å—ñ–≤`);
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ñ–∞–π–ª
    await fs.mkdir('snapshots', { recursive: true });
    await fs.writeFile(`snapshots/${filename}`, JSON.stringify(snapshot, null, 2), 'utf8');
    
    // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –ª–æ–≥
    await addExternalLog('DATABASE_SNAPSHOT', {
      filename,
      description,
      total_records: Object.values(snapshot.tables).reduce((sum, t) => sum + t.count, 0),
      tables: Object.keys(snapshot.tables).length
    });
    
    console.log(`‚úÖ –ó–Ω—ñ–º–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: snapshots/${filename}`);
    return filename;
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω—ñ–º–∫—É:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è (—É —Ñ–∞–π–ª, –Ω–µ –≤ –±–∞–∑—É)
export async function addExternalLog(event_type, details = {}) {
  const timestamp = new Date().toISOString();
  const logEntry = {
    timestamp,
    event_type,
    details
  };
  
  try {
    await fs.mkdir('logs', { recursive: true });
    
    // –î–æ–¥–∞—î–º–æ –¥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª—É
    const date = timestamp.split('T')[0];
    const logFile = `logs/database-events-${date}.json`;
    
    let logs = [];
    try {
      const existing = await fs.readFile(logFile, 'utf8');
      logs = JSON.parse(existing);
    } catch {
      // –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
    }
    
    logs.push(logEntry);
    await fs.writeFile(logFile, JSON.stringify(logs, null, 2), 'utf8');
    
    console.log(`üìù –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –ª–æ–≥: ${event_type}`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –±–∞–∑–∏
export async function checkDatabaseIntegrity() {
  console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –±–∞–∑–∏...');
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    const checks = [
      { table: 'sales', expected_min: 1000 },
      { table: 'inventory_levels', expected_min: 100 },
      { table: 'product_variants', expected_min: 100 },
      { table: 'change_logs', expected_min: 1 }
    ];
    
    const results = [];
    
    for (const check of checks) {
      const sql = `SELECT COUNT(*) as count FROM ${check.table}`;
      const result = execSync(`wrangler d1 execute hoodie-sales --remote --command "${sql}" --json`, { encoding: 'utf8' });
      const json = JSON.parse(result);
      const count = json[0]?.results?.[0]?.count || 0;
      
      const status = count >= check.expected_min ? 'OK' : 'WARNING';
      
      results.push({
        table: check.table,
        count,
        expected_min: check.expected_min,
        status
      });
      
      if (status === 'OK') {
        console.log(`  ‚úÖ ${check.table}: ${count} –∑–∞–ø–∏—Å—ñ–≤`);
      } else {
        console.log(`  ‚ö†Ô∏è  ${check.table}: ${count} –∑–∞–ø–∏—Å—ñ–≤ (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è –º—ñ–Ω. ${check.expected_min})`);
      }
    }
    
    // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    await addExternalLog('INTEGRITY_CHECK', { results });
    
    const hasWarnings = results.some(r => r.status === 'WARNING');
    if (hasWarnings) {
      console.log('‚ö†Ô∏è  –í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –∑–º—ñ–Ω–∏ –≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤!');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–Ω—ñ–º–æ–∫ —è–∫—â–æ –≤—Å–µ –û–ö
      if (!hasWarnings) {
        await createDatabaseSnapshot('Auto snapshot after integrity check');
      }
    }
    
    return results;
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ:', error.message);
    await addExternalLog('INTEGRITY_CHECK_ERROR', { error: error.message });
    throw error;
  }
}