import { execSync } from "node:child_process";

console.log('üìä –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤ –∑–º—ñ–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—ñ–≤
function queryD1(sql) {
  try {
    // –û—á–∏—â—É—î–º–æ SQL –≤—ñ–¥ –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤ —Ä—è–¥–∫—ñ–≤ —ñ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    const cleanSql = sql.replace(/\s+/g, ' ').trim();
    const result = execSync(`wrangler d1 execute hoodie-sales --remote --command "${cleanSql}" --json`, { encoding: 'utf8' });
    const json = JSON.parse(result);
    return json[0]?.results || [];
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω
function showRecentChanges(limit = 20) {
  console.log(`üìà –û—Å—Ç–∞–Ω–Ω—ñ ${limit} –∑–º—ñ–Ω –≤ –±–∞–∑—ñ:\n`);
  
  const sql = `
    SELECT 
      timestamp,
      operation_type,
      table_name,
      sku,
      field_name,
      old_value,
      new_value,
      source,
      additional_data
    FROM change_logs 
    ORDER BY timestamp DESC 
    LIMIT ${limit}
  `;
  
  const logs = queryD1(sql);
  
  if (logs.length === 0) {
    console.log('‚ö†Ô∏è –õ–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥—É–≤–∞–Ω–Ω—è.');
    return;
  }
  
  logs.forEach((log, i) => {
    const time = new Date(log.timestamp + 'Z').toLocaleString('uk-UA');
    console.log(`${i + 1}. [${time}] ${log.operation_type} ${log.table_name}`);
    if (log.sku) console.log(`   SKU: ${log.sku}`);
    if (log.field_name !== 'unknown') console.log(`   –ü–æ–ª–µ: ${log.field_name}`);
    if (log.old_value && log.new_value) {
      console.log(`   –ó–º—ñ–Ω–∞: ${log.old_value} ‚Üí ${log.new_value}`);
    } else if (log.new_value) {
      console.log(`   –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è: ${log.new_value}`);
    }
    if (log.source) console.log(`   –î–∂–µ—Ä–µ–ª–æ: ${log.source}`);
    console.log('');
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –∑–º—ñ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
function showProductChanges(sku) {
  console.log(`üîç –ó–º—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ${sku}:\n`);
  
  const sql = `
    SELECT 
      timestamp,
      operation_type,
      table_name,
      field_name,
      old_value,
      new_value,
      source,
      additional_data
    FROM change_logs 
    WHERE sku = '${sku}'
    ORDER BY timestamp DESC
  `;
  
  const logs = queryD1(sql);
  
  if (logs.length === 0) {
    console.log(`‚ö†Ô∏è –ó–º—ñ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä—É ${sku} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
    return;
  }
  
  logs.forEach((log, i) => {
    const time = new Date(log.timestamp + 'Z').toLocaleString('uk-UA');
    console.log(`${i + 1}. [${time}] ${log.operation_type} ${log.table_name}.${log.field_name}`);
    if (log.old_value && log.new_value) {
      console.log(`   ${log.old_value} ‚Üí ${log.new_value} (${log.source})`);
    } else if (log.new_value) {
      console.log(`   –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${log.new_value} (${log.source})`);
    } else if (log.old_value) {
      console.log(`   –í–∏–¥–∞–ª–µ–Ω–æ: ${log.old_value} (${log.source})`);
    }
    console.log('');
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–º—ñ–Ω –∑–∞ –ø–µ—Ä—ñ–æ–¥
function showChangeStats(hours = 24) {
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–º—ñ–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ ${hours} –≥–æ–¥–∏–Ω:\n`);
  
  const sql = `
    SELECT 
      table_name,
      operation_type,
      source,
      COUNT(*) as count
    FROM change_logs 
    WHERE datetime(timestamp) >= datetime('now', '-${hours} hours')
    GROUP BY table_name, operation_type, source
    ORDER BY count DESC
  `;
  
  const stats = queryD1(sql);
  
  if (stats.length === 0) {
    console.log(`‚ö†Ô∏è –ó–º—ñ–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ ${hours} –≥–æ–¥–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
    return;
  }
  
  stats.forEach(stat => {
    console.log(`üìà ${stat.table_name}.${stat.operation_type} (${stat.source}): ${stat.count} –∑–º—ñ–Ω`);
  });
  console.log('');
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
    console.log('  node view-logs.mjs                    - –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –∑–º—ñ–Ω');
    console.log('  node view-logs.mjs recent 50          - –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –∑–º—ñ–Ω'); 
    console.log('  node view-logs.mjs product KUF001BKL  - –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–º—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É');
    console.log('  node view-logs.mjs stats 12           - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 12 –≥–æ–¥–∏–Ω');
    console.log('');
    
    showRecentChanges(20);
    return;
  }
  
  const command = args[0];
  
  switch (command) {
    case 'recent':
      const limit = parseInt(args[1]) || 20;
      showRecentChanges(limit);
      break;
      
    case 'product':
      const sku = args[1];
      if (!sku) {
        console.log('‚ùå –í–∫–∞–∂—ñ—Ç—å SKU —Ç–æ–≤–∞—Ä—É');
        return;
      }
      showProductChanges(sku);
      break;
      
    case 'stats':
      const hours = parseInt(args[1]) || 24;
      showChangeStats(hours);
      break;
      
    default:
      console.log('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞:', command);
  }
}

main().catch(console.error);