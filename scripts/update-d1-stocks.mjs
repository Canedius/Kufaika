import fs from "node:fs/promises";
import { execSync } from "node:child_process";

console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –≤ D1 –±–∞–∑—ñ...');

// –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É
const stocksData = JSON.parse(await fs.readFile('data/latest-stocks.json', 'utf8'));

console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${stocksData.length} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è`);

let updated = 0;
let errors = 0;
let notFound = 0;

for (const stock of stocksData) {
  if (!stock.found) {
    console.log(`‚ö†Ô∏è ${stock.sku}: –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ KeyCRM)`);
    notFound++;
    continue;
  }

  try {
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–∏—à–∫–∏ –≤ D1
    const updateCommand = `UPDATE inventory_levels SET in_stock = ${stock.in_stock}, in_reserve = ${stock.in_reserve}, updated_at = '${new Date().toISOString()}' WHERE variant_id = (SELECT id FROM product_variants WHERE sku = '${stock.sku}');`;
    
    const result = execSync(`wrangler d1 execute hoodie-sales --remote --command "${updateCommand}"`, { encoding: 'utf8' });
    
    console.log(`‚úÖ ${stock.sku}: ${stock.in_stock}/${stock.in_reserve} –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ D1`);
    updated++;
    
    // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ D1
    await new Promise(resolve => setTimeout(resolve, 100));
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ${stock.sku}:`, error.message);
    errors++;
  }
}

console.log(`\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è D1:`);
console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${updated} –∑–∞–ø–∏—Å—ñ–≤`);
console.log(`‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ KeyCRM: ${notFound}`);
console.log(`‚ùå –ü–æ–º–∏–ª–æ–∫: ${errors}`);
console.log(`üì¶ –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${stocksData.length}`);

if (updated > 0) {
  console.log('\nüéâ –ó–∞–ª–∏—à–∫–∏ –≤ D1 –±–∞–∑—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
} else {
  console.log('\n‚ö†Ô∏è –ñ–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
}