// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥—É –∑–∞–≤–∏—Å–ª–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤
console.log('üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥ –∑–∞–≤–∏—Å–ª–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤...');

import { execSync } from "node:child_process";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–∏—Å–ª–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤
async function getFailedWebhooks() {
  const sql = `
    SELECT id, payload, error 
    FROM webhook_events 
    WHERE status = 'failed' 
    AND error LIKE '%NEW.id%' 
    AND date(received_at) >= date('now')
    ORDER BY id DESC 
    LIMIT 10
  `;
  
  try {
    const output = execSync(`wrangler d1 execute hoodie-sales --remote --command "${sql}" --json`, { encoding: 'utf8' });
    const result = JSON.parse(output);
    return result[0]?.results || [];
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫—ñ–≤:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫—É —è–∫ pending –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
async function retryWebhook(webhookId) {
  const sql = `
    UPDATE webhook_events 
    SET status = 'pending', error = NULL, processed_at = NULL 
    WHERE id = ${webhookId}
  `;
  
  try {
    execSync(`wrangler d1 execute hoodie-sales --remote --command "${sql}"`, { encoding: 'utf8' });
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ ${webhookId} –ø–æ–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏`);
    return true;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –≤–µ–±—Ö—É–∫–æ–º ${webhookId}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  console.log('üìã –®—É–∫–∞—î–º–æ –∑–∞–≤–∏—Å–ª—ñ –≤–µ–±—Ö—É–∫–∏ –∑ –ø–æ–º–∏–ª–∫–æ—é NEW.id...');
  
  const failedWebhooks = await getFailedWebhooks();
  
  if (failedWebhooks.length === 0) {
    console.log('‚úÖ –ó–∞–≤–∏—Å–ª–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–æ—é NEW.id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    return;
  }
  
  console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${failedWebhooks.length} –∑–∞–≤–∏—Å–ª–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤:`);
  
  for (const webhook of failedWebhooks) {
    console.log(`üì¶ ID: ${webhook.id}, Payload: ${webhook.payload?.substring(0, 50)}...`);
    console.log(`‚ùå Error: ${webhook.error}`);
    
    const success = await retryWebhook(webhook.id);
    if (success) {
      console.log(`üîÑ –í–µ–±—Ö—É–∫ ${webhook.id} –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏`);
    }
    
    // –ü–∞—É–∑–∞ –º—ñ–∂ –æ–±—Ä–æ–±–∫–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüéâ –ü–µ—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üí° –í–µ–±—Ö—É–∫–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ä–æ–±–ª–µ–Ω—ñ worker-–æ–º');
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å
if (import.meta.url === `file://${process.argv[1].replace(/\\/g, '/')}`) {
  main().catch(console.error);
}