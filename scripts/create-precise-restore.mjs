import { readFileSync, writeFileSync } from 'fs';

console.log('üéØ –¢–û–ß–ù–ï –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ó CSV 4 –ñ–û–í–¢–ù–Ø 13:26');

function processCSVToSQL(csvFile, tableName) {
  console.log(`üìñ –û–±—Ä–æ–±–ª—è—é ${csvFile}...`);
  const csvContent = readFileSync(`../../backups/${csvFile}`, 'utf8');
  const lines = csvContent.trim().split('\n');
  
  if (lines.length === 0) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª ${csvFile} –ø—É—Å—Ç–∏–π`);
    return '';
  }
  
  const headers = lines[0].replace(/"/g, '').split(',');
  console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.join(', ')}`);
  
  let sql = `-- –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø ${tableName.toUpperCase()} –∑ ${csvFile}\n`;
  let validRecords = 0;
  
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;
    
    const values = line.replace(/"/g, '').split(',');
    if (values.length === headers.length) {
      const insertValues = values.map(v => {
        const trimmed = v.trim();
        return isNaN(trimmed) || trimmed === '' ? `'${trimmed}'` : trimmed;
      }).join(', ');
      
      sql += `INSERT INTO ${tableName} (${headers.join(', ')}) VALUES (${insertValues});\n`;
      validRecords++;
    } else {
      console.log(`‚ö†Ô∏è –†—è–¥–æ–∫ ${i}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ (${values.length} –∑–∞–º—ñ—Å—Ç—å ${headers.length})`);
    }
  }
  
  console.log(`‚úÖ ${tableName}: –æ–±—Ä–æ–±–ª–µ–Ω–æ ${validRecords} –∑–∞–ø–∏—Å—ñ–≤`);
  return sql;
}

try {
  let finalSQL = '-- üéØ –¢–û–ß–ù–ï –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ó –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô 4 –ñ–û–í–¢–ù–Ø 13:26\n\n';
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ sales
  finalSQL += processCSVToSQL('sales-2025-10-04_13-26-50.csv', 'sales');
  finalSQL += '\n\n';
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ inventory_levels  
  finalSQL += processCSVToSQL('inventory_levels-2025-10-04_13-26-50.csv', 'inventory_levels');
  
  // –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  writeFileSync('precise-restore.sql', finalSQL, 'utf8');
  
  console.log('üéâ –°—Ç–≤–æ—Ä–µ–Ω–æ precise-restore.sql');
  console.log('üìä –§–∞–π–ª –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è!');
  
} catch (error) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
}